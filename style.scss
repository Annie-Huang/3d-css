:root {
  --boxColor: #0ff7;
  --rotateSpeed: 30s;
}

body {
  background-color: #000;
  min-height: 100vh;
  display: flex;
  justify-content: center;
  align-items: center;
  font-size: 75px;
  perspective: 10em; /* perspective is how close to look at the x-axles */
  perspective-origin: 50% calc(50% - 2em); /* prefer to look down from above a bit. */
}

.scene {
  position: relative;
  transform-style: preserve-3d; /* The transform-style CSS property sets whether children of an element are positioned in the 3D space or are flattened in the plane of the element. */

  animation: sceneRotate var(--rotateSpeed) infinite linear;
  @keyframes sceneRotate {
    to { transform: rotateY(360deg); }
  }
}
.ball {
  width: 1em;
  height: 1em;
  border-radius: 50%;

  position: absolute;
  left: -0.5em;
  bottom: 1em;

  // the mid point is 50%, so this it is === lightblue, 50%, #000
  // Change it to lightblue, 30%, #000 or lightblue, 70%, #000 to see the very nice effect
  background-image: radial-gradient(
    circle at top,
    lightblue, #000
  );

  // Keep the ball rotate at the same speed but reverse direction with sceneRotate so no one notice the ball is just a piece of paper rather than a ball. =)
  animation: sceneRotate var(--rotateSpeed) infinite linear reverse;
}

.ballShadow {
  position: absolute;
  width: 100%;
  height: 100%;
  // You can compared the different with radial-gradient(#0007, #0000). It needs to be smaller because the ball is not as big as the cube side
  background-image: radial-gradient(#0007, #0000 50%);
}

.cube {
  width: 2em;
  height: 2em;

  position: absolute;
  top: -1em;
  left: -1em;

  .left, .right, .front, .back {
    position: absolute;
    width: 100%;
    height: 100%;
    background: var(--boxColor);

    box-shadow: 0 0 0.5em #000a inset; // !!! OMG, this is mind blowingly nice!
  };

  .front {
    transform: translateZ(1em);
  }
  .back {
    // If you do transform: translateZ(-1em); then it is only read left to right from the inside side, not the outside side of the back
    transform: rotateY(180deg) translateZ(1em);
  }
  .right {
    transform: rotateY(90deg) translateZ(1em);
  }
  .left {
    transform: rotateY(270deg) translateZ(1em);
  }

  .top {
    position: absolute;
    width: 2em; // Don't want to width and height to change with the size of the box of the cube
    height: 2em;
    background: var(--boxColor);
    transform: translateY(-50%) rotateX(90deg); // you need to do this one by one, first translateY and then rotation to see effect

    box-shadow: 0 0 0.5em #000a inset; // !!! OMG, this is mind blowingly nice!
  };

  // This is super cool too, a shuttled bottom
  .bottom {
    position: absolute;
    width: 2em;
    height: 2em;
    background: #0007;
    bottom: 0;
    transform: translateY(50%) rotateX(90deg);

    //box-shadow: 0 0 0.5em #000a inset; // You can see this one is not as nice as below one.
    box-shadow: 0 0 0.5em #000; // Don't make the box-shadow inset for the bottom side, should be outside.

  };

}
.floor {
  position: absolute;
  top: 1em; /* this is to make the floor at the center of the .cube bottom */
  transform:
    translate(-50%, -50%)
    rotateX(90deg); /* rotate the floor, you won't be able to see it without the perspective */

  width: 15em;
  height: 15em;
  background-image:
    radial-gradient(#0000, #000 75%), // !!! Very impressed! To make the center of the floor has more light than the edge.
    repeating-conic-gradient(
      from 45deg,
      #111 0deg 90deg,
      #222 90deg 180deg
    );
  background-size: 100%, 1em 1em;
}
